#lang racket

(provide cpv
         cpVect-x
         cpVect-y
         cpBB-l
         cpBB-r
         cpBB-t
         cpBB-b

         cpShape-e
         cpShape-u
         set-cpShape-e!
         set-cpShape-u!
         
         set-cpShape-group!

         cpBody-velocity_func
         set-cpBody-velocity_func!
         set-cpBody-p!

         _cpFloat
         _cpVect

         set-cpBody-data!
         set-cpShape-data!

         set-cpCollisionHandler-cpCollisionBeginFunc!
         set-cpCollisionHandler-cpCollisionPreSolveFunc!
         set-cpCollisionHandler-cpCollisionPostSolveFunc!
         set-cpCollisionHandler-cpCollisionSeparateFunc!)

(require ffi/unsafe
         ffi/unsafe/define)

(require racket/runtime-path)
(define-runtime-path bin-dir "./binaries/")

(define chipmunk (ffi-lib (~a bin-dir "libchipmunk")))
(define-ffi-definer _define-chipmunk chipmunk)

(define-syntax-rule (define-chipmunk i x ...)
  (begin (provide i)
         (_define-chipmunk i x ...)))

(define-cstruct _cpVect
  ([x _double]
   [y _double]))


(define _cpFloat _double)
(define cpFloat? real?)
(define _cpDataPointer _pointer)
(define _size_t _ulong)
(define _cpHashValue _size_t)
(define _cpBool _int)
(define cpTrue 1)
(define cpFalse 0)
(define _cpTimeStamp _uint)
(define _cpCollisionType _uint)
(define _cpGroup _uint)
(define _cpLayers _uint)


(define (cpv x y)
  (make-cpVect 
   (real->double-flonum x)
   (real->double-flonum y)))

(define _cpBodyVelocityFunc
  (_fun _pointer _cpVect _cpFloat _cpFloat -> _void))

(define _cpBodyPositionFunc
  (_fun _pointer _cpFloat -> _void))

(define-cstruct _cpBody
  (; Integration Functions
   [velocity_func _cpBodyVelocityFunc]
   [position_func _cpBodyPositionFunc]
   ; Mass Properties
   [m _cpFloat]
   [m_inv _cpFloat]
   [i _cpFloat]
   [i_inv _cpFloat]
   ; Positional Properties
   [p _cpVect]
   [v _cpVect]
   [f _cpVect]
   [a _cpFloat]
   [w _cpFloat]
   [t _cpFloat]
   [rot _cpVect]
   ; User Definable Fields
   [data _cpDataPointer]
   ; Internally Used Fields
   [v_bias _cpVect]
   [w_bias _cpFloat]))

(define-cstruct _cpSpace
  ([iterations _int]
   [gravity _cpVect]
   [damping _cpFloat]
   [idleSpeedThreshold _cpFloat]
   [sleepTimeThreshold _cpFloat]
   [collisionSlop _cpFloat]
   [collisionBias _cpFloat]
   [collisionPersistence _cpFloat]
   [enableContactGraph _cpBool]
   [data _cpDataPointer]
   [staticBody _cpBody-pointer]))

(define-cstruct _cpBB
  ([l _cpFloat]
   [b _cpFloat]
   [r _cpFloat]
   [t _cpFloat]))


(define-cstruct _cpShape
  ([body _cpBody-pointer]
   [bb _cpBB]
   [sensor _cpBool]
   [e _cpFloat]
   [u _cpFloat]
   [surface_v _cpVect]
   [data _cpDataPointer]
   [collision_type _cpCollisionType]
   [group _cpGroup]
   [layers _cpLayers]))




(define-chipmunk cpSpaceNew
  (_fun -> _cpSpace-pointer))


(define-chipmunk cpSpaceSetGravity
  (_fun _cpSpace-pointer _cpVect -> _void))


(define-chipmunk cpSegmentShapeNew
  (_fun _cpBody-pointer _cpVect _cpVect _cpFloat -> _cpShape-pointer))


(define-chipmunk cpSpaceGetStaticBody
  (_fun _cpSpace-pointer -> _cpBody-pointer))



(define-chipmunk cpShapeSetFriction
  (_fun _cpShape-pointer _cpFloat -> _void))



(define-chipmunk cpSpaceAddShape
  (_fun _cpSpace-pointer _cpShape-pointer -> _cpShape-pointer))

(define-chipmunk cpSpaceRemoveShape
  (_fun _cpSpace-pointer _cpShape-pointer -> _void))


(define-chipmunk cpMomentForCircle
  (_fun _cpFloat _cpFloat _cpFloat _cpVect -> _cpFloat))


(define-chipmunk cpMomentForBox
  (_fun _cpFloat _cpFloat _cpFloat -> _cpFloat))


(define-chipmunk cpSpaceAddBody
  (_fun _cpSpace-pointer _cpBody-pointer -> _cpBody-pointer))

(define-chipmunk cpSpaceRemoveBody
  (_fun _cpSpace-pointer _cpBody-pointer -> _void))


(define-chipmunk cpBodyNew
  (_fun _cpFloat _cpFloat -> _cpBody-pointer))

(define-chipmunk cpBodyNewKinematic
  (_fun -> _cpBody-pointer))

(define-chipmunk cpBodyNewStatic
  (_fun -> _cpBody-pointer))

(define-chipmunk cpBodySetPosition
  (_fun _cpBody-pointer _cpVect -> _void))


(define-chipmunk cpCircleShapeNew
  (_fun _cpBody-pointer _cpFloat _cpVect -> _cpShape-pointer))

(define-chipmunk cpBoxShapeNew
  (_fun _cpBody-pointer _cpFloat _cpFloat _cpVect -> _cpShape-pointer ))


(define-chipmunk cpShapeGetBB
  (_fun _cpShape-pointer -> _cpBB ))

(define-chipmunk cpBodyGetPosition
  (_fun _cpBody-pointer -> _cpVect))


(define-chipmunk cpBodySetVelocity
  (_fun _cpBody-pointer _cpVect -> _cpVect))


(define-chipmunk cpBodyGetVelocity
  (_fun _cpBody-pointer -> _cpVect))


;cpFloat 	cpBodyGetAngularVelocity (const cpBody *body)
(define-chipmunk cpBodyGetAngularVelocity
  (_fun _cpBody-pointer -> _cpFloat))


;cpBodySetAngularVelocity (cpBody *body, cpFloat angularVelocity)
(define-chipmunk cpBodySetAngularVelocity
  (_fun _cpBody-pointer _cpFloat -> _void))



(define-chipmunk cpBodyGetAngle
  (_fun _cpBody-pointer -> _cpFloat))

;void 	cpBodySetAngle (cpBody *body, cpFloat a)
(define-chipmunk cpBodySetAngle
  (_fun _cpBody-pointer _cpFloat -> _void))


(define-chipmunk cpSpaceStep
  (_fun _cpSpace-pointer _cpFloat -> _void))


(define-chipmunk cpShapeFree
  (_fun _cpShape-pointer -> _void))


(define-chipmunk cpBodyFree
  (_fun _cpBody-pointer -> _void))


(define-chipmunk cpSpaceFree
  (_fun _cpSpace-pointer -> _void))



;void 	cpBodyUpdateVelocity (cpBody *body, cpVect gravity, cpFloat damping, cpFloat dt)
(define-chipmunk cpBodyUpdateVelocity
  (_fun _cpBody-pointer _cpVect _cpFloat _cpFloat -> _void))






(define-cstruct _cpArbiter
  (
   ; Calculated value to use for the elasticity coefficient.
   ; Override in a pre-solve collision handler for custom behavior.
   [e _cpFloat]
   ; Calculated value to use for the friction coefficient.
   ; Override in a pre-solve collision handler for custom behavior.
   [u _cpFloat]
   ; Calculated value to use for applying surface velocities.
   ; Override in a pre-solve collision handler for custom behavior.
   [surface_vr _cpVect]))

(define _cpCollisionBeginFunc
  (_fun _cpArbiter-pointer
        _cpSpace-pointer
        _pointer
        -> _cpBool))
; Definitoin of 'Collision pre-solve event function callback type'.
(define _cpCollisionPreSolveFunc
  (_fun _cpArbiter-pointer
        _cpSpace-pointer
        _pointer
        -> _cpBool))
; Definition of 'Collision post-solve event function callback type'.
(define _cpCollisionPostSolveFunc
  (_fun _cpArbiter-pointer
        _cpSpace-pointer
        _pointer
        -> _void))
; Definition of 'Collision separate event function callback type'.
(define _cpCollisionSeparateFunc
  (_fun _cpArbiter-pointer
        _cpSpace-pointer
        _pointer
        -> _void))


(define-cstruct _cpCollisionHandler 
  (
   [typeA _cpCollisionType]
   [typeB _cpCollisionType]
   [cpCollisionBeginFunc _cpCollisionBeginFunc]
   [cpCollisionPreSolveFunc _cpCollisionPreSolveFunc]
   [cpCollisionPostSolveFunc _cpCollisionPostSolveFunc]
   [cpCollisionSeparateFunc _cpCollisionSeparateFunc]
   [cpDataPointer _cpDataPointer]))




(define-chipmunk cpSpaceAddDefaultCollisionHandler
  (_fun _cpSpace-pointer
        -> _cpCollisionHandler-pointer))
 

(define-chipmunk cpBodySetUserData
  (_fun _cpBody-pointer _cpDataPointer -> _void))

(define-chipmunk cpShapeSetUserData
  (_fun _cpShape-pointer _cpDataPointer -> _void))

(define-chipmunk cpSpaceSetUserData
  (_fun _cpSpace-pointer _cpDataPointer -> _void))




(define-chipmunk cpArbiterGetShapes
  (_fun _cpArbiter-pointer
        (out1 : (_ptr o _cpShape-pointer))
        (out2 : (_ptr o _cpShape-pointer))
        -> _void
        -> (values out1 out2)))

(define-chipmunk cpShapeGetUserData
  (_fun _cpShape-pointer -> _cpDataPointer))






(define-chipmunk cpShapeDestroy
  (_fun _cpShape-pointer -> _void))

(define-chipmunk cpBodyDestroy
  (_fun _cpBody-pointer -> _void))
